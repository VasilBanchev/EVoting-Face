@page "/Register"
@using BusinessLayer;
@using ServiceLayer;
@using BlazorServer.Services;
@using BlazorServer.Pages;
@inject ErrorModel errorModel;
@inject ILogger<User> logger;
@inject IdentityManager identityManager;
@inject NavigationManager navigationManager;
@using System.Diagnostics;
@using System.Text;
@inject IJSRuntime JSRuntime

<style>
    * {
        box-sizing: border-box;
    }

    body {
        font-family: poppins;
        font-size: 16px;
        color: #fff;
    }

    .form-box {
        background-color: rgba(0, 0, 0, 0.55);
        margin: auto auto;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 0 12px #000;
        position: center;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        width: 40%;
        height: auto%;
    }

        .form-box:before {
            width: 100%;
            height: 100%;
            background-size: cover;
            content: "";
            position: fixed;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            z-index: -1;
            display: block;
            filter: blur(2px);
        }

        .form-box .header-text {
            font-size: 32px;
            font-weight: 600;
            padding-bottom: 10px;
            text-align: center;
        }

        .form-box input {
            margin: 7px 0px;
            border: none;
            padding: 6.5px;
            border-radius: 4px;
            width: 100%;
            font-size: 18px;
            font-family: poppins;
        }

            .form-box input[type=checkbox] {
                display: none;
            }

                .form-box input[type=checkbox]:checked + label:before {
                    content: "\2713";
                    font-size: 20px;
                    color: #000;
                    text-align: center;
                    line-height: 20px;
                }

        .form-box span {
            font-size: 14px;
        }

        .form-box button {
            background-color: #2828aa;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            font-size: 18px;
            padding: 10px;
            margin: 10px 0px;
        }

    span a {
        color: #BBB;
    }

</style>




<EditForm Model="@iDCard" OnValidSubmit="HandleValidSubmit" hidden="@takePhoto">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-box">
        <div class="header-text">
            <h3>Регистриране в системата</h3>
        </div>
        <input type="text" placeholder="ЕГН" minlength="10" maxlength="10" @bind-value="iDCard.EGN" required />
        <input type="password" placeholder="Парола" @bind-value="password" required />
        <input type="text" minlength="9" placeholder="Номер на личната карта" maxlength="9" @bind-value="iDCard.IDCardNumber" required />
        <input type="text" placeholder="Име" @bind-value="iDCard.Name" required />
        <input type="text" placeholder="Презиме" @bind-value="iDCard.MidName" required />
        <input type="text" placeholder="Фамилия" @bind-value="iDCard.LastName" required /><br />
        <label> <big>Местожителство</big></label> <select @bind="region">
            @for (int i = 0; i < regions.Count; i++)
            {
                <option value="@i">
                    @regions[i]
                </option>
            }
        </select>
        <label><big>Дата на изтичане на личната карта: </big></label><br />

        <input type="date" @bind-value="iDCard.DateOfExpiry" required />
        <label><big>Снимка на предната част на личната карта:</big> </label><br />

        <InputFile accept=".png,.jpg" OnChange="@AddFrontPhoto" required />
        <label><big>Снимка на задната част на личната карта:</big> </label><br />
        <InputFile accept=".png,.jpg" OnChange="@AddBackPhoto" required />

        <button type="button" class="outline" @onclick="ShowCamera">Снимка на лицето  <big>📷</big></button>

        <button type="submit">Регистрация</button>

    </div>
</EditForm>
<h3 class="col-md-4 text-danger">@errMess</h3>

<center>

    <div style="visibility: @takePhoto; background-color:rgba(255, 255, 255, 0.7);">
        <canvas id="canvas" width="640px" height="480px" style="display:none;"></canvas>
        <video id="video" width="640px" height="480px" style="display:none;" autoplay></video>
        <button id="captureButton" class="outline green" @onclick="CapturePhoto" style="margin:15px; display:none;">Снимай</button>
        <button id="backButton" class="outline red" @onclick="Back" style="margin:15px; display:none; ">Назад</button>

    </div>
</center>
@code {
    string errMess = string.Empty;

    IDCard iDCard = new IDCard();
    IDCardPhotos idPhotoes;
    string password = string.Empty;
    byte[] photo1;
    byte[] photo2;
    byte[] photo3;
    int region;
    bool takePhoto = false;
    List<string> regions = new List<string>() { "Благоевград", "Бургас", "Варна", "Велико Търново", "Видин", "Враца", "Габрово", "Кърджали", "Кюстендил", "Ловеч", "Монтана", "Пазарджик", "Перник", "Плевен", "Пловдив", "Разград", "Русе", "Силистра", "Сливен", "Смолян", "София – град", "София – окръг", "Стара Загора", "Добрич", "Търговище", "Хасково", "Шумен", "Ямбол", "Друг/Неизвестен" };

    protected override async Task OnInitializedAsync()
    {
     /*   if ((await identityManager.ReadUserEGNAsync("admin")) == null)
        {
            await identityManager.SeedDataAsync("admin", "admin");
        }*/
        iDCard.DateOfExpiry = DateTime.Now.Date;
    }

    private async Task ShowCamera()
    {
        takePhoto = !takePhoto;
        if (takePhoto)
        {
            await JSRuntime.InvokeVoidAsync("initializeCameraInterop");

            await JSRuntime.InvokeVoidAsync("setElementStyle", "captureButton", "display", "block");
            await JSRuntime.InvokeVoidAsync("setElementStyle", "backButton", "display", "block");
            await JSRuntime.InvokeVoidAsync("setElementStyle", "video", "display", "block");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("setElementStyle", "video", "display", "none");
            await JSRuntime.InvokeVoidAsync("setElementStyle", "canvas", "display", "none");
            await JSRuntime.InvokeVoidAsync("setElementStyle", "backButton", "display", "none");
            await JSRuntime.InvokeVoidAsync("setElementStyle", "captureButton", "display", "none");
        }


    }
    private async Task Back()
    {
        takePhoto = !takePhoto;

        await JSRuntime.InvokeVoidAsync("stopCamera");
        await JSRuntime.InvokeVoidAsync("setElementStyle", "video", "display", "none");
        await JSRuntime.InvokeVoidAsync("setElementStyle", "canvas", "display", "none");
        await JSRuntime.InvokeVoidAsync("setElementStyle", "backButton", "display", "none");
        await JSRuntime.InvokeVoidAsync("setElementStyle", "captureButton", "display", "none");
    }
    private async Task AddFrontPhoto(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                using (var ms = new MemoryStream())
                {
                    await file.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
                    photo1 = ms.ToArray();
                }
            }
        }
        catch (Exception ex)
        {
            errMess = ex.Message;
        }
    }

    private async Task AddBackPhoto(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                using (var ms = new MemoryStream())
                {
                    await file.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
                    photo2 = ms.ToArray();
                }
            }
        }
        catch (Exception ex)
        {
            errMess = ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (photo3 == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Направете първо снимка на лицето си.");
            }
            else
            {
                idPhotoes = new IDCardPhotos(photo1, photo2, photo3);

                IDCard idcard = new IDCard(iDCard.IDCardNumber, iDCard.Name, iDCard.MidName, iDCard.LastName, iDCard.EGN, idPhotoes, iDCard.DateOfExpiry, region);

                User user = new User(idcard);
                user.PasswordHash = password;

                await identityManager.CreateUserAsync(user);
                navigationManager.NavigateTo("/", true); // Rerender the navigation menu!
            }

        }
        catch (ArgumentException)
        {
            await JSRuntime.InvokeVoidAsync("alert", "ЕГНто или номера на личната карта е невалиден или вече е използвано"); // да не се разбира дали ЕГНто е използвано и да се започнат атаки за отгатвнане на паролата
            navigationManager.NavigateTo("/Register", forceLoad: true);
        }
        catch (Exception ex)
        {
            errMess = ex.Message;
        }



    }

    private async Task CapturePhoto()
    {
        try
        {
            var imageDataUrl = await JSRuntime.InvokeAsync<string>("capturePhoto");
            var base64Data = imageDataUrl.Substring(imageDataUrl.IndexOf(',') + 1);
            var photo = Convert.FromBase64String(base64Data);
            await JSRuntime.InvokeVoidAsync("stopCamera");

            await JSRuntime.InvokeVoidAsync("setElementStyle", "canvas", "display", "block");
            await JSRuntime.InvokeVoidAsync("setElementStyle", "video", "display", "none");
            await JSRuntime.InvokeVoidAsync("setElementStyle", "captureButton", "display", "none");
            await JSRuntime.InvokeVoidAsync("setElementStyle", "backButton", "display", "none");

            await AI(photo);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error capturing photo: {ex.Message}");
        }
    }

    private async Task RetakePhoto()
    {
        await JSRuntime.InvokeVoidAsync("setElementStyle", "video", "display", "block");
        await JSRuntime.InvokeVoidAsync("setElementStyle", "canvas", "display", "none");
        await JSRuntime.InvokeVoidAsync("setElementStyle", "captureButton", "display", "block");

        await JSRuntime.InvokeVoidAsync("initializeCameraInterop");
        photo3 = null;
    }

    private async Task AI(byte[] capturedimage)
    {
        string pythonScript = @"
import sys
import base64
import numpy as np
import face_recognition
from io import BytesIO
from PIL import Image

def compare_faces(image1_bytes, image2_bytes):
    image1 = np.array(Image.open(BytesIO(image1_bytes)))
    image2 = np.array(Image.open(BytesIO(image2_bytes)))

    image1_encodings = face_recognition.face_encodings(image1)
    image2_encodings = face_recognition.face_encodings(image2)

    if len(image1_encodings) == 0 or len(image2_encodings) == 0:
        return 'No faces found in one or both images.'

    match = face_recognition.compare_faces(image1_encodings, image2_encodings[0], tolerance=0.5)

    if match[0]:
        return 'True'
    else:
        return 'False'

if __name__ == '__main__':
    image1_base64 = sys.stdin.readline().strip()
    image2_base64 = sys.stdin.readline().strip()

    image1_bytes = base64.b64decode(image1_base64)
    image2_bytes = base64.b64decode(image2_base64)

    result = compare_faces(image1_bytes, image2_bytes)
    print(result)
";

        var processInfo = new ProcessStartInfo
            {
                FileName = "python",
                RedirectStandardInput = true,
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                Arguments = "-c \"" + pythonScript + "\"",
            };

        using (var process = new Process { StartInfo = processInfo })
        {
            process.Start();

            using (var streamWriter = new StreamWriter(process.StandardInput.BaseStream, Encoding.ASCII))
            {

                string image1Base64 = Convert.ToBase64String(capturedimage);
                await streamWriter.WriteLineAsync(image1Base64);
                await streamWriter.WriteLineAsync(image1Base64);

            }
            string result = process.StandardOutput.ReadLine();
            if (result == "True")
            {
                await JSRuntime.InvokeVoidAsync("alert", "Успешно направена снимка за вход");
                await ShowCamera();
                photo3 = capturedimage;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Неуспешен опит за снимка за вход. \n Опитайте отново.");
                await RetakePhoto();
            }

            process.WaitForExit();
        }
    }
}
