@using BusinessLayer;
@using ServiceLayer;
@inject NavigationManager navManager;
@page "/PastElections"
<AuthorizeView Roles="Admin, User">
    
<h3 style="text-align:center;  background-color: rgba(255, 255, 255, 0.5); padding: 10px;   color: black;">
    Проведени избори
</h3>
<table width="100%" style="background-color: white;" cellpadding="5">
    @if (previousElections.Count != 0)
    {
        <tr>
            <td>Тип:</td>
            <td>Начало:</td>
            <td>Край:</td>
            <td></td> 
        </tr>
        @if (previousElections.Count != 0)
        {
            foreach (var item in previousElections)
            {
                <tr>
                        <td width="25%">@TypeToString(item.Type)</td>
                        <td width="25%">@item.DateFrom</td>
                        <td width="25%">@item.Dateto</td>
                        <td width="25%"><button class="outline" @onclick="() => ViewResult(item.ID)">Виж резултати</button></td>
                </tr>
            }
        }

    }
</table>
</AuthorizeView>

<label id="error" class="col-md-4 text-danger">@errMess</label>
@code {
    string errMess = string.Empty; ElectionManager em = new ElectionManager(DBContextManager.CreateContext());
    List<Election> previousElections = new List<Election>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
        previousElections = (await em.ReadAllAsync()).Where(e => e.Dateto.CompareTo(DateTime.Now) <= 0).ToList();


        }
        catch (Exception ex)
        {
            errMess = ex.Message;
        }

    }

    private string TypeToString(int type)
    {
        string[] types = { "Президентски", "Парламентарни", "Местни", "Референдум" };
        return types[type - 1];
    } 

    private async Task ViewResult(int electionID)
    {
        navManager.NavigateTo($"/Result/{electionID}");

    }
}
